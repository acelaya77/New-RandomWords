#region :: Header
<#

NAME        : New-RandomPassword.psm1
AUTHOR      : Anthony J. Celaya
DESCRIPTION : Generate a random password which matches security requirements including uppercase, lowercase, numbers and symbols.
MODULES     : 
GLOBAL VARS : 
UPDATED     : 04-12-2018
VERSION     : 1.2



Ver EntryDate  Editor Description    
--- ---------  ------ -----------    
1.0 11-08-2017 ac007  INITIAL RELEASE
1.1 02-13-2018 ac007  Cleaned up a bit.
1.2 04-12-2018 ac007  Updated with code excluding empty results.

#>
#endregion


Function New-RandomPassword{
[CmdletBinding()]
Param(
	[parameter(Mandatory=$true)][int]$length
)
Begin{
	#$ofs = ""
}
Process{
	
    $length = (8..12) | Get-Random
	$caps = [char[]] "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    $lows = [char[]] $([string[]]$caps).tolower()
    $lows = $lows | ?{$_ -notmatch "[l|o]"}
    $caps = $caps | ?{$_ -notmatch "[O|I]"}
	$nums = [char[]] [string[]] (0..9)
    $nums = $nums | ?{$_ -notmatch "[0|1]"} 
	$symb = [char[]] "@#$%&" #"!@#$%&*()"
    
	$categories = (3..4) | get-random
    $remaining = $length
    $categoryCount = $categories
    $result = @()
    @($(gv caps).Name,$(gv lows).Name,$(gv nums).Name,$(gv symb).Name) | sort{Get-Random} | Select-Object -First $categories | %{
        $(gv -Name $_).Name
        $categoryCount--

        [string[]]$a = ($(gv -Name $_).Value | Get-Random -Count $(($categoryCount..($remaining-$categoryCount)) | get-random))

        Write-Host -NoNewline -ForegroundColor DarkCyan "`$a.count........: "; Write-Host $($a.count)
        Write-Host -NoNewline -ForegroundColor DarkCyan "`$a..............: "; Write-Host -ForegroundColor Cyan $a

        $result += $a -join ""
        $remaining = $remaining - $a.count
        #Read-Host "Pause"
        
        Write-Host -NoNewline -ForegroundColor DarkCyan "Remaining.......: ";Write-Host $remaining
        Write-Host -NoNewline -ForegroundColor DarkCyan "categoryCount...: ";Write-Host $categoryCount

    }
    [string]$result = $($result -join "")
    Write-Host ""
    Write-Host -NoNewline -ForegroundColor Green "Length..........: "; Write-Host $length
    Write-Host -NoNewline -ForegroundColor Green "ResultCount.....: "; Write-Host $($([char[]]$result).count)
    $result



	$symbCount = 2 #Get-Random -Minimum 1 -Maximum 2
	$numsCount = Get-Random -Minimum 1 -Maximum ($length-$symbCount-2)
	$lowsCount = Get-Random -Minimum 1 -Maximum ($length-$symbCount-$numsCount-1)
	$capsCount = $length-$symbCount-$lowsCount-$numsCount

	#$bytes = new-object "System.Byte[]" $length

	#$random = new-object System.Security.Cryptography.RNGCryptoServiceProvider
	#$random.GetBytes($bytes)

	if(gv -name result -ErrorAction SilentlyContinue){remove-variable -name result} #$result = $null
	$result = @()
	$result += [string[]]($caps | Get-Random -Count $capsCount)
	$result += [string[]]($nums | Get-Random -Count $numsCount)
	$result += [string[]]($lows | Get-Random -Count $lowsCount)
	$result += [string[]]($symb | Get-Random -Count $symbCount)
	$result = [string[]]$($result.Replace(" ",'')) | %{$_} | Sort {Get-Random}
	[string]$result = $result -join ""

	$output = [PSCustomObject]@{
		Secure = (ConvertTo-SecureString -AsPlainText $result -Force)
		Text = $result
	}
	#$output

	#return $result,(convertTo-SecureString -AsPlainText $result -Force)
	Return $output
	#return [string]$([char[]]$result | sort {Get-random})
}
End{
	if($result){remove-variable -name result}
	if($ofs){remove-variable -name ofs}
}
#Note: Test
# 1..$length | ForEach { $NewPassword = $NewPassword + [char]$randomObj.next(33,126) }
}

<#

Remove-Module New-RandomPassword
Import-Module New-RandomPassword

New-RandomPassword -length 10

#>


