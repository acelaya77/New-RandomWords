#region		========================== :: Header :: ========================= #
<#
	NAME..........:	SCCCDAccounts.psm1
	AUTHOR........:	Anthony J. Celaya
	DATE..........:	06-19-2018
	DESCRIPTION...:	Creates new mailbox in SCCCD for new account.
	NOTES.........:
	LAST_UPDATED..:	06-19-2018
	VERSION.......:	2.0
	HISTORY.......:
		VER	DATE	EDITOR	DESCRIPTION
		1.0	01-20-2017	ac007	Initial Release.
		1.1	08-07-2017	ac007	Add Header.
		1.2	08-07-2017	ac007	Rename function and file to include approved verb
		2.0	06-19-2018	ac007	Rewrite of modules.
#>
#endregion	========================== :: Header :: ========================= #

. $PSScriptRoot\Initialize-TrackItExportFile.ps1
Export-ModuleMember Initialize-TrackItExportFile
. $PSScriptRoot\Initialize-NewAccounts.ps1
Export-ModuleMember Initialize-NewAccounts
. $PSScriptRoot\New-SCCCDMailbox.ps1
Export-ModuleMember New-SCCCDMailbox
. $PSSCriptRoot\Initialize-TrackItSeparations.ps1
Export-ModuleMember Initialize-TrackItSeparations
Export-ModuleMember Get-ExchangeDatabase
. $PSScriptRoot\Initialize-NewMailboxes_WIP.ps1
Export-ModuleMember initialize-NewMailboxes


$newOU = $doNewOU = [ADSI]"LDAP://OU=New Accounts,OU=DO,DC=SCCCD,DC=NET"
$fccNewOU = [ADSI]"LDAP://OU=New Accounts,OU=FC,DC=SCCCD,DC=NET"
$cccNewOU = [ADSI]"LDAP://OU=New Accounts,OU=CCC,DC=SCCCD,DC=NET"
$rcNewOU =  [ADSI]"LDAP://OU=New Accounts,OU=RC,DC=SCCCD,DC=NET"
$mcNewOU =  [ADSI]"LDAP://OU=New Accounts,OU=MC,OU=NC,DC=SCCCD,DC=NET"
$ocNewOU =  [ADSI]"LDAP://OU=New Accounts,OU=OC,OU=NC,DC=SCCCD,DC=NET"
$GlobaL:scccdOUs = @{
	New = $newOU
	DO = $doNewOU
	FCC = $fccNewOU
	CCC = $cccNewOU
	RC = $rcNewOU
	MC = $mcNewOU
	OC = $ocNewOU
}
Write-Verbose $scccdOUs
Write-Verbose $scccdOUs['DO']

#region		============ :: Filter duplicates & validate file :: ============ #
#endreigon	============ :: Filter duplicates & validate file :: ============ #

#region		===================== :: Create Mailbox  :: ===================== #
Function New-SCCCDMailboxOld{
	#[CmdletBinding(DefaultParameterSetName="Normal")]
    [CmdletBinding()]
	Param(
		 [Parameter(Mandatory= $true, Position = 1, ParameterSetName = "Normal")]
		 $User

		,[Parameter(Mandatory= $true, Position = 2, ParameterSetName = "Normal")]
		 [ValidateSet("FCC","CCC","RC","MC","DO","CTC","OC","HC")]
		 [string]$Site

		,[Parameter(Mandatory= $true, Position = 3, ParameterSetName = "Normal")]
		 [ValidateSet("Adjunct","Faculty","Classified","Management","Student","Provisional")]
		 $EmployeeType

		,[Parameter(Mandatory=$false, Position = 4, ParameterSetName = "MakeIt")]
		 [switch]$MakeItHappen

		,[Parameter(Mandatory=$false, Position = 5, ParameterSetName = "Initialize")]
         [switch]$initialize
		#[Parameter(Mandatory=$false, Position = 5, ParameterSetName = "Normal")][switch]$process
	)
	Begin{


	}#</Begin{}>

	Process{

        Switch($PSBoundParameters.ContainsKey('Initialize')){
            $true{
                $file = Get-ChildItem "\\sdofs1-08e\is$\Continuity\Celaya\AD\New-Mailbox-Accounts.csv"
                copy-item $file $(Join-Path $(Split-Path $file) $file.Name.Replace('.csv',".$(get-date -f 'yyyyMMdd-HHmmss').csv"))
                #$null | Out-File $file
                Clear-Content $file

                $createMeFile = Get-ChildItem "C:\Users\ac007\Desktop\TEMP\Create-Me.csv"
                $importedHere = Import-Csv $createMeFile
                $importedHere.count
                $ii = @()
                foreach($i in $importedHere){
                    <#
                    $user = [PSCustomObject]@{
                        EmployeeName = $i.EmployeeName
                        EmployeeID = $i.EmployeeID
                        Initials = Get-SQLWebAdvisorID -EmployeeIDs "`'$($i.EmployeeID)`'"
                    }
                    #>
                    $userX = $null
                    $strEmplID = "`'$($i.EmployeeID)`'"
                    $UserX = Get-SQLWebAdvisorID -EmployeeIDs $strEmplID
                    $strEmplID = $null
                    $UserX | Get-Member

                    Write-Host ".."

                    if($UserX.count -gt 1){
                        $continue = Read-Host -Prompt "More than one account. Continue? [y|n]"
                        [bool]$continue = Switch($continue){{$_ -like "y"}{$true};Default{$false}}
                    }
                    elseif($continue){
                        New-SCCCDMailbox -User $UserX -Site $i.Site -EmployeeType $i.EmployeeType
                    }
                    #$user | fl
                    $ii += $UserX
                    $UserX = $null
                }
                $ii | Format-Table -AutoSize
            }
            #Default{}
        }

        Switch($PSBoundParameters.ContainsKey('MakeItHappen')){
			$true{
				$file = Get-ChildItem "\\sdofs1-08e\is$\Continuity\Celaya\AD\New-Mailbox-Accounts.csv"
				$fileInput = import-Csv $file.Fullname
				foreach($mailbox in $fileInput){
					$password = ConvertTo-SecureString -Force -AsPlainText $mailbox.Password

                    $splat = @{
                        Alias                    = $mailbox.Alias
                        sAMAccountName           = $mailbox.Alias
                        UserPrincipalName        = $mailbox.UserPrincipalName
                        Name                     = $mailbox.Name
                        LastName                 = $mailbox.Surname
                        FirstName                = $mailbox.Givenname
                        DisplayName              = $mailbox.DisplayName
                        PrimarySMTPAddress       = $mailbox.PrimarySMTPAddress
                        ResetPasswordOnNextLogon = $false
                        Password                 = $password
                        Database                 = $mailbox.Database
                    }
                    <#
                    New-Mailbox `
                        -Alias $mailbox.Alias `
                        -sAMAccountName $mailbox.Alias `
                        -UserPrincipalName $mailbox.UserPrincipalName `
                        -Name $mailbox.Name `
                        -LastName $mailbox.Surname `
                        -FirstName $mailbox.Givenname `
                        -DisplayName $mailbox.DisplayName `
                        -PrimarySMTPAddress $mailbox.PrimarySMTPAddress `
                        -ResetPasswordOnNextLogon $false `
                        -Password $password `
                        -Database $mailbox.Database |
					#>
                    New-Mailbox @splat |
                    	Format-List | out-file $(Join-Path $(Split-Path $file) "$($mailbox.Alias)-mailbox.log")
					<#
					Set-Mailbox `
						-EmailAddressPolicyEnable $false `
					#>

				}
				Return
			}
			Default{}
		}


		[bool]$Student = Switch($EmployeeType){
					{$_ -eq "Student"}{$True}
					Default{$False}
				}

        $User | Format-List

        Write-Host "......"

        $initials = "$($user.Givenname.Substring(0,1))$($user.Surname.Substring(0,1))"
        if($initials -like ""){
            $continue = $null
            [bool]$continue = Switch($(Read-Host -Prompt "No Initials. Continue? [y|n]")){
                {$_ -like "y"}{$true}
                Default{$false}
            }
        }
        else{
		    Switch($Student){
			    $true{
				    do{
                        $Alias = Get-NextSamAccountName -Initials $initials -Student -EmployeeID "$($user.EmployeeID)"
                    }Until($($(Import-Csv $file.FullName).sAMAccountName) -notcontains $Alias)
			    }
			    Default{
				    do{
                        $Alias = Get-NextSamAccountName -Initials $initials
                    }Until($($(Import-Csv $file.FullName).sAMAccountName) -notcontains $Alias)
			    }
		    }
        }
        Write-Host -ForegroundColor DarkRed $Alias
		$Name = "$($user.Givenname) $($user.Surname)"
		$Givenname = $user.Givenname
		$EmployeeID = $user.EmployeeID
		$ExtensionAttribute1 = $user.ExtensionAttribute1
		$Surname = $user.Surname
		$Suffix = $user.Suffix
		$UserPrincipalName = "$($alias)@SCCCD.NET"
		$Password = New-RandomPassword -Length 8
		$Database = Get-ExchangeDatabase -Site $Site -EmployeeType $EmployeeType
		$objSite = Get-SiteInfo -Site $site
		$PrimarySMTPAddress = "$($givenname.tolower().replace(' ','-')).$($surname.tolower().replace(' ','-'))$($objSite.domain)"
		Switch($User.PreferredName){
			{$_ -notlike ""}{
				$DisplayName = "$($_) $($Surname)"
				$SecondarySMTPAddress = $PrimarySMTPAddress
				$PrimarySMTPAddress = "$($user.preferredname.tolower().replace(' ','-')).$($surname.ToLower().Replace(' ','-'))$($objSite.domain)"
			}
			Default{
				$DisplayName = $Name
			}
		}
		$objMailbox = [PSCustomObject][ordered]@{
			Alias                = $Alias
			sAMAccountName       = $Alias
			EmployeeID           = $EmployeeID
			ExtensionAttribute1  = $ExtensionAttribute1
			UserPrincipalName    = $UserPrincipalName
			Name                 = $Name
			Givenname            = $Givenname
			Surname              = $Surname
			GenerationQualifier  = $Suffix
			DisplayName          = $DisplayName
			PrimarySMTPAddress   = $PrimarySMTPAddress
			SecondarySMTPAddress = $SecondarySMTPAddress
			Database             = $Database
			Password             = $Password.Text
			OrganizationalUnit   = $objSite.OU
		}

		$objMailbox | Export-Csv -NoTypeInformation -Delimiter "," $file -Append
        Return $objMailbox

	}#</Process{}>
	End{}#</End{}>
}#</New-SCCCDMailbox{}>; Remove-Module New-SCCCDMailBox; Import-Module New-SCCCDMailbox
#endregion	===================== :: Create Mailbox  :: ===================== #


#region		================== :: Update AD Attributes  :: ================== #
#endregion	================== :: Update AD Attributes  :: ================== #


#region		================= :: Log Account Information :: ================= #
#endregion	================= :: Log Account Information :: ================= #

#region		==================== :: Support Functions :: ==================== #
<#
Function Get-NextSamAccountName {
	[CmdletBinding(DefaultParameterSetName="Normal")]
	[OutputType([string])]
	Param(
		[Parameter(Mandatory= $true, ParameterSetName="Normal")]
		[Parameter(ParameterSetName="Student")]
		[ValidatePattern("^[\w]{2}$")]
		[string]$Initials,

		[Parameter(Mandatory=$false, ParameterSetName="Normal")]
		[Parameter(ParameterSetName="Student")]
		[string[]]$Exclude,

		[Parameter(Mandatory=$false, ParameterSetName="Student")]
		[switch]$Student,

		[Parameter(Mandatory=$false, ParameterSetName="Student")]
		[string]$EmployeeID
	)#</Param()>

	Begin{
		$counter = 001
		if(![string]::IsNullOrWhiteSpace($initials)){
			$testLogin = $initials + $($counter.ToString('000'))
		} #</if()>
		$testMe = "$testLogin"
	} #</Begin{}>

	Process{
		Switch($student){
			$true{
				$results = $initials.ToLower() + $EmployeeID
			}#</True{}>
			$false{
				do{
					$j = $null
					$testMe = "$($initials + $counter.ToString('000'))"

					if($testMe -in $exclude){
						write-verbose "Excluded: $testMe"
						$counter++
						$j = $testMe
						continue
					} #</if()>

					if($($(get-aduser -filter {sAMAccountName -eq $testMe} -ErrorAction SilentlyContinue).sAMAccountName)){
						$j = $($(get-aduser -filter {sAMAccountName -eq $testMe} -ErrorAction SilentlyContinue).sAMAccountName)
					} #</if()>

                    Switch($(get-aduser -Filter {sAMAccountName -eq $testMe} -ErrorAction SilentlyContinue).sAMAccountName){
                        {$_ -eq ""}{
                            #$true
                            #$j
                        }
                        Default{
                            #$false
                            $j = $_
                            #Write-Host -ForegroundColor DarkCyan $j
                        }
                    }#</switch{}>


					if($j -eq $null){
						break
					} #</if()>
					else{

					} #</else()>
					$counter++
				} #</do{}>
				while($j -ne $null) #</while()>

				$results = "$($initials.ToLower() + $counter.ToString('000'))"
			}#</$false{}>
		}#</switch($student){}>
		Return $results
	}#</Process{}>

	End{}#</End{}>
} #</Get-NextSamAccountName{}>
#>

<#
Remove-Module SCCCDAccounts
Import-Module SCCCDAccounts
#>

#region :: Function :: Get-DefaultExchangeDB{}

#region		==================== :: Support Functions :: ==================== #

